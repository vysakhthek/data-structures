from typing import List

class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        remainder_frequency = {0: 1}
        count = prefix_sum = 0
        for num in nums:
            prefix_sum += num
            remainder = prefix_sum % k

            count += remainder_frequency.get(remainder, 0)
            remainder_frequency[remainder] = remainder_frequency.get(remainder, 0) + 1
            
        return count

# Brute force appraoch
# class Solution:
#     def subarraysDivByK(self, nums: List[int], k: int) -> int:
#         count = 0
#         for i in range(len(nums)):
#             sum = 0
#             for j in range(i, len(nums)):
#                 sum += nums[j]
#                 if sum % k == 0:
#                     count += 1
#         return count 